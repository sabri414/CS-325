import math
from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])

def dist(p: Point, q: Point) -> float:
    return math.sqrt((p.x - q.x) ** 2 + (p.y - q.y) ** 2) 

def smcross(P: list[Point], Q: list[Point]) -> float:
    m, n = len(P), len(Q)
    dp: list[list[bool]] = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j]  = dist(P[i - 1], Q[j - 1])
            if i != 1 or j != 1:
                dp[i][j] = max(dp[i][j], min(dp[i - 1][j], min(dp[i][j - 1], dp[i - 1][j - 1])))
    return dp[m][n]

def cross(P: list[Point], Q: list[Point], L: list[any]) -> any:
    minl = None
    sm = smcross(P, Q)
    for l in L: 
        if l >= sm and (minl is None or l < minl):
            minl = l
    return minl

def min_band_length(input_file_path: str, output_file_path: str):
    try:
        with open(input_file_path, 'r') as infile:
            rows = [l.replace('(', '').replace(')', '').split(',') for l in infile.readlines()]
            P = [Point(int(x), int(y)) for x, y in zip(*[iter(rows[1])] * 2)] 
            Q = [Point(int(x), int(y)) for x, y in zip(*[iter(rows[3])] * 2)] 
            L = list(map(int, rows[5]))
            minl = cross(P, Q, L) 
            with open(output_file_path, 'w') as outfile:
                if minl is None:
                    outfile.write('None\n')
                else:
                    outfile.write(f'{minl}\n')
    except Exception as exception:
        print(exception)
